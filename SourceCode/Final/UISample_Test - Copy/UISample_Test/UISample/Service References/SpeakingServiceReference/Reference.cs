//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40818.0
// 
namespace UISample.SpeakingServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SPEAKING", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class SPEAKING : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ID_UnitField;
        
        private string SuggestionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID_Unit {
            get {
                return this.ID_UnitField;
            }
            set {
                if ((this.ID_UnitField.Equals(value) != true)) {
                    this.ID_UnitField = value;
                    this.RaisePropertyChanged("ID_Unit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Suggestion {
            get {
                return this.SuggestionField;
            }
            set {
                if ((object.ReferenceEquals(this.SuggestionField, value) != true)) {
                    this.SuggestionField = value;
                    this.RaisePropertyChanged("Suggestion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SpeakingServiceReference.ISpeakingService")]
    public interface ISpeakingService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISpeakingService/DoWork", ReplyAction="http://tempuri.org/ISpeakingService/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISpeakingService/GetSpeakingUnit", ReplyAction="http://tempuri.org/ISpeakingService/GetSpeakingUnitResponse")]
        System.IAsyncResult BeginGetSpeakingUnit(int id_Unit, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<UISample.SpeakingServiceReference.SPEAKING> EndGetSpeakingUnit(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISpeakingService/GetSpeaking_PracticeContents", ReplyAction="http://tempuri.org/ISpeakingService/GetSpeaking_PracticeContentsResponse")]
        System.IAsyncResult BeginGetSpeaking_PracticeContents(int ID_Unit, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetSpeaking_PracticeContents(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ISpeakingServiceChannel : UISample.SpeakingServiceReference.ISpeakingService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetSpeakingUnitCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSpeakingUnitCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<UISample.SpeakingServiceReference.SPEAKING> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<UISample.SpeakingServiceReference.SPEAKING>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetSpeaking_PracticeContentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSpeaking_PracticeContentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SpeakingServiceClient : System.ServiceModel.ClientBase<UISample.SpeakingServiceReference.ISpeakingService>, UISample.SpeakingServiceReference.ISpeakingService {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSpeakingUnitDelegate;
        
        private EndOperationDelegate onEndGetSpeakingUnitDelegate;
        
        private System.Threading.SendOrPostCallback onGetSpeakingUnitCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSpeaking_PracticeContentsDelegate;
        
        private EndOperationDelegate onEndGetSpeaking_PracticeContentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetSpeaking_PracticeContentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SpeakingServiceClient() {
        }
        
        public SpeakingServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SpeakingServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpeakingServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SpeakingServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<GetSpeakingUnitCompletedEventArgs> GetSpeakingUnitCompleted;
        
        public event System.EventHandler<GetSpeaking_PracticeContentsCompletedEventArgs> GetSpeaking_PracticeContentsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult UISample.SpeakingServiceReference.ISpeakingService.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void UISample.SpeakingServiceReference.ISpeakingService.EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((UISample.SpeakingServiceReference.ISpeakingService)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            ((UISample.SpeakingServiceReference.ISpeakingService)(this)).EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult UISample.SpeakingServiceReference.ISpeakingService.BeginGetSpeakingUnit(int id_Unit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSpeakingUnit(id_Unit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<UISample.SpeakingServiceReference.SPEAKING> UISample.SpeakingServiceReference.ISpeakingService.EndGetSpeakingUnit(System.IAsyncResult result) {
            return base.Channel.EndGetSpeakingUnit(result);
        }
        
        private System.IAsyncResult OnBeginGetSpeakingUnit(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int id_Unit = ((int)(inValues[0]));
            return ((UISample.SpeakingServiceReference.ISpeakingService)(this)).BeginGetSpeakingUnit(id_Unit, callback, asyncState);
        }
        
        private object[] OnEndGetSpeakingUnit(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<UISample.SpeakingServiceReference.SPEAKING> retVal = ((UISample.SpeakingServiceReference.ISpeakingService)(this)).EndGetSpeakingUnit(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSpeakingUnitCompleted(object state) {
            if ((this.GetSpeakingUnitCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSpeakingUnitCompleted(this, new GetSpeakingUnitCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSpeakingUnitAsync(int id_Unit) {
            this.GetSpeakingUnitAsync(id_Unit, null);
        }
        
        public void GetSpeakingUnitAsync(int id_Unit, object userState) {
            if ((this.onBeginGetSpeakingUnitDelegate == null)) {
                this.onBeginGetSpeakingUnitDelegate = new BeginOperationDelegate(this.OnBeginGetSpeakingUnit);
            }
            if ((this.onEndGetSpeakingUnitDelegate == null)) {
                this.onEndGetSpeakingUnitDelegate = new EndOperationDelegate(this.OnEndGetSpeakingUnit);
            }
            if ((this.onGetSpeakingUnitCompletedDelegate == null)) {
                this.onGetSpeakingUnitCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSpeakingUnitCompleted);
            }
            base.InvokeAsync(this.onBeginGetSpeakingUnitDelegate, new object[] {
                        id_Unit}, this.onEndGetSpeakingUnitDelegate, this.onGetSpeakingUnitCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult UISample.SpeakingServiceReference.ISpeakingService.BeginGetSpeaking_PracticeContents(int ID_Unit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSpeaking_PracticeContents(ID_Unit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> UISample.SpeakingServiceReference.ISpeakingService.EndGetSpeaking_PracticeContents(System.IAsyncResult result) {
            return base.Channel.EndGetSpeaking_PracticeContents(result);
        }
        
        private System.IAsyncResult OnBeginGetSpeaking_PracticeContents(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int ID_Unit = ((int)(inValues[0]));
            return ((UISample.SpeakingServiceReference.ISpeakingService)(this)).BeginGetSpeaking_PracticeContents(ID_Unit, callback, asyncState);
        }
        
        private object[] OnEndGetSpeaking_PracticeContents(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((UISample.SpeakingServiceReference.ISpeakingService)(this)).EndGetSpeaking_PracticeContents(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSpeaking_PracticeContentsCompleted(object state) {
            if ((this.GetSpeaking_PracticeContentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSpeaking_PracticeContentsCompleted(this, new GetSpeaking_PracticeContentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSpeaking_PracticeContentsAsync(int ID_Unit) {
            this.GetSpeaking_PracticeContentsAsync(ID_Unit, null);
        }
        
        public void GetSpeaking_PracticeContentsAsync(int ID_Unit, object userState) {
            if ((this.onBeginGetSpeaking_PracticeContentsDelegate == null)) {
                this.onBeginGetSpeaking_PracticeContentsDelegate = new BeginOperationDelegate(this.OnBeginGetSpeaking_PracticeContents);
            }
            if ((this.onEndGetSpeaking_PracticeContentsDelegate == null)) {
                this.onEndGetSpeaking_PracticeContentsDelegate = new EndOperationDelegate(this.OnEndGetSpeaking_PracticeContents);
            }
            if ((this.onGetSpeaking_PracticeContentsCompletedDelegate == null)) {
                this.onGetSpeaking_PracticeContentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSpeaking_PracticeContentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetSpeaking_PracticeContentsDelegate, new object[] {
                        ID_Unit}, this.onEndGetSpeaking_PracticeContentsDelegate, this.onGetSpeaking_PracticeContentsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override UISample.SpeakingServiceReference.ISpeakingService CreateChannel() {
            return new SpeakingServiceClientChannel(this);
        }
        
        private class SpeakingServiceClientChannel : ChannelBase<UISample.SpeakingServiceReference.ISpeakingService>, UISample.SpeakingServiceReference.ISpeakingService {
            
            public SpeakingServiceClientChannel(System.ServiceModel.ClientBase<UISample.SpeakingServiceReference.ISpeakingService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DoWork", _args, result);
            }
            
            public System.IAsyncResult BeginGetSpeakingUnit(int id_Unit, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id_Unit;
                System.IAsyncResult _result = base.BeginInvoke("GetSpeakingUnit", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<UISample.SpeakingServiceReference.SPEAKING> EndGetSpeakingUnit(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<UISample.SpeakingServiceReference.SPEAKING> _result = ((System.Collections.ObjectModel.ObservableCollection<UISample.SpeakingServiceReference.SPEAKING>)(base.EndInvoke("GetSpeakingUnit", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetSpeaking_PracticeContents(int ID_Unit, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID_Unit;
                System.IAsyncResult _result = base.BeginInvoke("GetSpeaking_PracticeContents", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetSpeaking_PracticeContents(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetSpeaking_PracticeContents", _args, result)));
                return _result;
            }
        }
    }
}
