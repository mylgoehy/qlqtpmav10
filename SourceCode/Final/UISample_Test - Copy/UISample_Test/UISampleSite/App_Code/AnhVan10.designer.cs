#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.Serialization;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="AnhVan10")]
public partial class AnhVan10DataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertBOOK(BOOK instance);
  partial void UpdateBOOK(BOOK instance);
  partial void DeleteBOOK(BOOK instance);
  partial void InsertWRITING(WRITING instance);
  partial void UpdateWRITING(WRITING instance);
  partial void DeleteWRITING(WRITING instance);
  partial void InsertGRAMMAR_PRACTICE(GRAMMAR_PRACTICE instance);
  partial void UpdateGRAMMAR_PRACTICE(GRAMMAR_PRACTICE instance);
  partial void DeleteGRAMMAR_PRACTICE(GRAMMAR_PRACTICE instance);
  partial void InsertLANGUAGE_FOCUS(LANGUAGE_FOCUS instance);
  partial void UpdateLANGUAGE_FOCUS(LANGUAGE_FOCUS instance);
  partial void DeleteLANGUAGE_FOCUS(LANGUAGE_FOCUS instance);
  partial void InsertLISTENING(LISTENING instance);
  partial void UpdateLISTENING(LISTENING instance);
  partial void DeleteLISTENING(LISTENING instance);
  partial void InsertLISTENING_PRACTICE(LISTENING_PRACTICE instance);
  partial void UpdateLISTENING_PRACTICE(LISTENING_PRACTICE instance);
  partial void DeleteLISTENING_PRACTICE(LISTENING_PRACTICE instance);
  partial void InsertMUSIC(MUSIC instance);
  partial void UpdateMUSIC(MUSIC instance);
  partial void DeleteMUSIC(MUSIC instance);
  partial void InsertMUSIC_PRACTICE(MUSIC_PRACTICE instance);
  partial void UpdateMUSIC_PRACTICE(MUSIC_PRACTICE instance);
  partial void DeleteMUSIC_PRACTICE(MUSIC_PRACTICE instance);
  partial void InsertPICTURE(PICTURE instance);
  partial void UpdatePICTURE(PICTURE instance);
  partial void DeletePICTURE(PICTURE instance);
  partial void InsertREADING(READING instance);
  partial void UpdateREADING(READING instance);
  partial void DeleteREADING(READING instance);
  partial void InsertREADING_ANSWER(READING_ANSWER instance);
  partial void UpdateREADING_ANSWER(READING_ANSWER instance);
  partial void DeleteREADING_ANSWER(READING_ANSWER instance);
  partial void InsertREADING_PRACTICE(READING_PRACTICE instance);
  partial void UpdateREADING_PRACTICE(READING_PRACTICE instance);
  partial void DeleteREADING_PRACTICE(READING_PRACTICE instance);
  partial void InsertRECORD_SPEAKING(RECORD_SPEAKING instance);
  partial void UpdateRECORD_SPEAKING(RECORD_SPEAKING instance);
  partial void DeleteRECORD_SPEAKING(RECORD_SPEAKING instance);
  partial void InsertSAVE_WRITING(SAVE_WRITING instance);
  partial void UpdateSAVE_WRITING(SAVE_WRITING instance);
  partial void DeleteSAVE_WRITING(SAVE_WRITING instance);
  partial void InsertSPEAKING(SPEAKING instance);
  partial void UpdateSPEAKING(SPEAKING instance);
  partial void DeleteSPEAKING(SPEAKING instance);
  partial void InsertTEST(TEST instance);
  partial void UpdateTEST(TEST instance);
  partial void DeleteTEST(TEST instance);
  partial void InsertUNIT(UNIT instance);
  partial void UpdateUNIT(UNIT instance);
  partial void DeleteUNIT(UNIT instance);
  partial void InsertUSER(USER instance);
  partial void UpdateUSER(USER instance);
  partial void DeleteUSER(USER instance);
  partial void InsertUSER_MARK(USER_MARK instance);
  partial void UpdateUSER_MARK(USER_MARK instance);
  partial void DeleteUSER_MARK(USER_MARK instance);
  partial void InsertVOCABULARY(VOCABULARY instance);
  partial void UpdateVOCABULARY(VOCABULARY instance);
  partial void DeleteVOCABULARY(VOCABULARY instance);
  #endregion
	
	public AnhVan10DataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["AnhVan10ConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public AnhVan10DataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public AnhVan10DataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public AnhVan10DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public AnhVan10DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<BOOK> BOOKs
	{
		get
		{
			return this.GetTable<BOOK>();
		}
	}
	
	public System.Data.Linq.Table<WRITING> WRITINGs
	{
		get
		{
			return this.GetTable<WRITING>();
		}
	}
	
	public System.Data.Linq.Table<GRAMMAR_PRACTICE> GRAMMAR_PRACTICEs
	{
		get
		{
			return this.GetTable<GRAMMAR_PRACTICE>();
		}
	}
	
	public System.Data.Linq.Table<LANGUAGE_FOCUS> LANGUAGE_FOCUS
	{
		get
		{
			return this.GetTable<LANGUAGE_FOCUS>();
		}
	}
	
	public System.Data.Linq.Table<LISTENING> LISTENINGs
	{
		get
		{
			return this.GetTable<LISTENING>();
		}
	}
	
	public System.Data.Linq.Table<LISTENING_PRACTICE> LISTENING_PRACTICEs
	{
		get
		{
			return this.GetTable<LISTENING_PRACTICE>();
		}
	}
	
	public System.Data.Linq.Table<MUSIC> MUSICs
	{
		get
		{
			return this.GetTable<MUSIC>();
		}
	}
	
	public System.Data.Linq.Table<MUSIC_PRACTICE> MUSIC_PRACTICEs
	{
		get
		{
			return this.GetTable<MUSIC_PRACTICE>();
		}
	}
	
	public System.Data.Linq.Table<PICTURE> PICTUREs
	{
		get
		{
			return this.GetTable<PICTURE>();
		}
	}
	
	public System.Data.Linq.Table<READING> READINGs
	{
		get
		{
			return this.GetTable<READING>();
		}
	}
	
	public System.Data.Linq.Table<READING_ANSWER> READING_ANSWERs
	{
		get
		{
			return this.GetTable<READING_ANSWER>();
		}
	}
	
	public System.Data.Linq.Table<READING_PRACTICE> READING_PRACTICEs
	{
		get
		{
			return this.GetTable<READING_PRACTICE>();
		}
	}
	
	public System.Data.Linq.Table<RECORD_SPEAKING> RECORD_SPEAKINGs
	{
		get
		{
			return this.GetTable<RECORD_SPEAKING>();
		}
	}
	
	public System.Data.Linq.Table<SAVE_WRITING> SAVE_WRITINGs
	{
		get
		{
			return this.GetTable<SAVE_WRITING>();
		}
	}
	
	public System.Data.Linq.Table<SPEAKING> SPEAKINGs
	{
		get
		{
			return this.GetTable<SPEAKING>();
		}
	}
	
	public System.Data.Linq.Table<TEST> TESTs
	{
		get
		{
			return this.GetTable<TEST>();
		}
	}
	
	public System.Data.Linq.Table<UNIT> UNITs
	{
		get
		{
			return this.GetTable<UNIT>();
		}
	}
	
	public System.Data.Linq.Table<USER> USERs
	{
		get
		{
			return this.GetTable<USER>();
		}
	}
	
	public System.Data.Linq.Table<USER_MARK> USER_MARKs
	{
		get
		{
			return this.GetTable<USER_MARK>();
		}
	}
	
	public System.Data.Linq.Table<VOCABULARY> VOCABULARies
	{
		get
		{
			return this.GetTable<VOCABULARY>();
		}
	}
}

[Table(Name="dbo.BOOK")]
[DataContract()]
public partial class BOOK : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Book;
	
	private string _Type;
	
	private string _Name;
	
	private string _Author;
	
	private string _Parth;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_BookChanging(int value);
    partial void OnID_BookChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAuthorChanging(string value);
    partial void OnAuthorChanged();
    partial void OnParthChanging(string value);
    partial void OnParthChanged();
    #endregion
	
	public BOOK()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Book", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Book
	{
		get
		{
			return this._ID_Book;
		}
		set
		{
			if ((this._ID_Book != value))
			{
				this.OnID_BookChanging(value);
				this.SendPropertyChanging();
				this._ID_Book = value;
				this.SendPropertyChanged("ID_Book");
				this.OnID_BookChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="NVarChar(20)")]
	[DataMember(Order=2)]
	public string Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(20)")]
	[DataMember(Order=3)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Author", DbType="NVarChar(20)")]
	[DataMember(Order=4)]
	public string Author
	{
		get
		{
			return this._Author;
		}
		set
		{
			if ((this._Author != value))
			{
				this.OnAuthorChanging(value);
				this.SendPropertyChanging();
				this._Author = value;
				this.SendPropertyChanged("Author");
				this.OnAuthorChanged();
			}
		}
	}
	
	[Column(Storage="_Parth", DbType="NVarChar(50)")]
	[DataMember(Order=5)]
	public string Parth
	{
		get
		{
			return this._Parth;
		}
		set
		{
			if ((this._Parth != value))
			{
				this.OnParthChanging(value);
				this.SendPropertyChanging();
				this._Parth = value;
				this.SendPropertyChanged("Parth");
				this.OnParthChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.WRITING")]
[DataContract()]
public partial class WRITING : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Unit;
	
	private int _ID_Task;
	
	private int _ID_Ques;
	
	private string _Ques;
	
	private string _Ans;
	
	private string _Template;
	
	private EntityRef<UNIT> _UNIT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UnitChanging(int value);
    partial void OnID_UnitChanged();
    partial void OnID_TaskChanging(int value);
    partial void OnID_TaskChanged();
    partial void OnID_QuesChanging(int value);
    partial void OnID_QuesChanged();
    partial void OnQuesChanging(string value);
    partial void OnQuesChanged();
    partial void OnAnsChanging(string value);
    partial void OnAnsChanged();
    partial void OnTemplateChanging(string value);
    partial void OnTemplateChanged();
    #endregion
	
	public WRITING()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Unit", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				if (this._UNIT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_ID_Task", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public int ID_Task
	{
		get
		{
			return this._ID_Task;
		}
		set
		{
			if ((this._ID_Task != value))
			{
				this.OnID_TaskChanging(value);
				this.SendPropertyChanging();
				this._ID_Task = value;
				this.SendPropertyChanged("ID_Task");
				this.OnID_TaskChanged();
			}
		}
	}
	
	[Column(Storage="_ID_Ques", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=3)]
	public int ID_Ques
	{
		get
		{
			return this._ID_Ques;
		}
		set
		{
			if ((this._ID_Ques != value))
			{
				this.OnID_QuesChanging(value);
				this.SendPropertyChanging();
				this._ID_Ques = value;
				this.SendPropertyChanged("ID_Ques");
				this.OnID_QuesChanged();
			}
		}
	}
	
	[Column(Storage="_Ques", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=4)]
	public string Ques
	{
		get
		{
			return this._Ques;
		}
		set
		{
			if ((this._Ques != value))
			{
				this.OnQuesChanging(value);
				this.SendPropertyChanging();
				this._Ques = value;
				this.SendPropertyChanged("Ques");
				this.OnQuesChanged();
			}
		}
	}
	
	[Column(Storage="_Ans", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=5)]
	public string Ans
	{
		get
		{
			return this._Ans;
		}
		set
		{
			if ((this._Ans != value))
			{
				this.OnAnsChanging(value);
				this.SendPropertyChanging();
				this._Ans = value;
				this.SendPropertyChanged("Ans");
				this.OnAnsChanged();
			}
		}
	}
	
	[Column(Storage="_Template", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=6)]
	public string Template
	{
		get
		{
			return this._Template;
		}
		set
		{
			if ((this._Template != value))
			{
				this.OnTemplateChanging(value);
				this.SendPropertyChanging();
				this._Template = value;
				this.SendPropertyChanged("Template");
				this.OnTemplateChanged();
			}
		}
	}
	
	[Association(Name="UNIT_WRITING", Storage="_UNIT", ThisKey="ID_Unit", OtherKey="ID_Unit", IsForeignKey=true)]
	public UNIT UNIT
	{
		get
		{
			return this._UNIT.Entity;
		}
		set
		{
			UNIT previousValue = this._UNIT.Entity;
			if (((previousValue != value) 
						|| (this._UNIT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UNIT.Entity = null;
					previousValue.WRITINGs.Remove(this);
				}
				this._UNIT.Entity = value;
				if ((value != null))
				{
					value.WRITINGs.Add(this);
					this._ID_Unit = value.ID_Unit;
				}
				else
				{
					this._ID_Unit = default(int);
				}
				this.SendPropertyChanged("UNIT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._UNIT = default(EntityRef<UNIT>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.GRAMMAR_PRACTICE")]
[DataContract()]
public partial class GRAMMAR_PRACTICE : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Unit;
	
	private int _Task;
	
	private int _Ques;
	
	private string _Ans;
	
	private EntityRef<UNIT> _UNIT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UnitChanging(int value);
    partial void OnID_UnitChanged();
    partial void OnTaskChanging(int value);
    partial void OnTaskChanged();
    partial void OnQuesChanging(int value);
    partial void OnQuesChanged();
    partial void OnAnsChanging(string value);
    partial void OnAnsChanged();
    #endregion
	
	public GRAMMAR_PRACTICE()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Unit", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				if (this._UNIT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_Task", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public int Task
	{
		get
		{
			return this._Task;
		}
		set
		{
			if ((this._Task != value))
			{
				this.OnTaskChanging(value);
				this.SendPropertyChanging();
				this._Task = value;
				this.SendPropertyChanged("Task");
				this.OnTaskChanged();
			}
		}
	}
	
	[Column(Storage="_Ques", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=3)]
	public int Ques
	{
		get
		{
			return this._Ques;
		}
		set
		{
			if ((this._Ques != value))
			{
				this.OnQuesChanging(value);
				this.SendPropertyChanging();
				this._Ques = value;
				this.SendPropertyChanged("Ques");
				this.OnQuesChanged();
			}
		}
	}
	
	[Column(Storage="_Ans", DbType="NVarChar(50)")]
	[DataMember(Order=4)]
	public string Ans
	{
		get
		{
			return this._Ans;
		}
		set
		{
			if ((this._Ans != value))
			{
				this.OnAnsChanging(value);
				this.SendPropertyChanging();
				this._Ans = value;
				this.SendPropertyChanged("Ans");
				this.OnAnsChanged();
			}
		}
	}
	
	[Association(Name="UNIT_GRAMMAR_PRACTICE", Storage="_UNIT", ThisKey="ID_Unit", OtherKey="ID_Unit", IsForeignKey=true)]
	public UNIT UNIT
	{
		get
		{
			return this._UNIT.Entity;
		}
		set
		{
			UNIT previousValue = this._UNIT.Entity;
			if (((previousValue != value) 
						|| (this._UNIT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UNIT.Entity = null;
					previousValue.GRAMMAR_PRACTICEs.Remove(this);
				}
				this._UNIT.Entity = value;
				if ((value != null))
				{
					value.GRAMMAR_PRACTICEs.Add(this);
					this._ID_Unit = value.ID_Unit;
				}
				else
				{
					this._ID_Unit = default(int);
				}
				this.SendPropertyChanged("UNIT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._UNIT = default(EntityRef<UNIT>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.LANGUAGE_FOCUS")]
[DataContract()]
public partial class LANGUAGE_FOCUS : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Unit;
	
	private string _Pronunciation;
	
	private string _Grammar;
	
	private string _Grammar_Path;
	
	private EntityRef<UNIT> _UNIT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UnitChanging(int value);
    partial void OnID_UnitChanged();
    partial void OnPronunciationChanging(string value);
    partial void OnPronunciationChanged();
    partial void OnGrammarChanging(string value);
    partial void OnGrammarChanged();
    partial void OnGrammar_PathChanging(string value);
    partial void OnGrammar_PathChanged();
    #endregion
	
	public LANGUAGE_FOCUS()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Unit", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				if (this._UNIT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_Pronunciation", DbType="NVarChar(50)")]
	[DataMember(Order=2)]
	public string Pronunciation
	{
		get
		{
			return this._Pronunciation;
		}
		set
		{
			if ((this._Pronunciation != value))
			{
				this.OnPronunciationChanging(value);
				this.SendPropertyChanging();
				this._Pronunciation = value;
				this.SendPropertyChanged("Pronunciation");
				this.OnPronunciationChanged();
			}
		}
	}
	
	[Column(Storage="_Grammar", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=3)]
	public string Grammar
	{
		get
		{
			return this._Grammar;
		}
		set
		{
			if ((this._Grammar != value))
			{
				this.OnGrammarChanging(value);
				this.SendPropertyChanging();
				this._Grammar = value;
				this.SendPropertyChanged("Grammar");
				this.OnGrammarChanged();
			}
		}
	}
	
	[Column(Storage="_Grammar_Path", DbType="NVarChar(50)")]
	[DataMember(Order=4)]
	public string Grammar_Path
	{
		get
		{
			return this._Grammar_Path;
		}
		set
		{
			if ((this._Grammar_Path != value))
			{
				this.OnGrammar_PathChanging(value);
				this.SendPropertyChanging();
				this._Grammar_Path = value;
				this.SendPropertyChanged("Grammar_Path");
				this.OnGrammar_PathChanged();
			}
		}
	}
	
	[Association(Name="UNIT_LANGUAGE_FOCUS", Storage="_UNIT", ThisKey="ID_Unit", OtherKey="ID_Unit", IsForeignKey=true)]
	public UNIT UNIT
	{
		get
		{
			return this._UNIT.Entity;
		}
		set
		{
			UNIT previousValue = this._UNIT.Entity;
			if (((previousValue != value) 
						|| (this._UNIT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UNIT.Entity = null;
					previousValue.LANGUAGE_FOCUS = null;
				}
				this._UNIT.Entity = value;
				if ((value != null))
				{
					value.LANGUAGE_FOCUS = this;
					this._ID_Unit = value.ID_Unit;
				}
				else
				{
					this._ID_Unit = default(int);
				}
				this.SendPropertyChanged("UNIT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._UNIT = default(EntityRef<UNIT>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.LISTENING")]
[DataContract()]
public partial class LISTENING : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Unit;
	
	private string _ContentPractise;
	
	private EntityRef<UNIT> _UNIT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UnitChanging(int value);
    partial void OnID_UnitChanged();
    partial void OnContentPractiseChanging(string value);
    partial void OnContentPractiseChanged();
    #endregion
	
	public LISTENING()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Unit", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				if (this._UNIT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_ContentPractise", DbType="NVarChar(50)")]
	[DataMember(Order=2)]
	public string ContentPractise
	{
		get
		{
			return this._ContentPractise;
		}
		set
		{
			if ((this._ContentPractise != value))
			{
				this.OnContentPractiseChanging(value);
				this.SendPropertyChanging();
				this._ContentPractise = value;
				this.SendPropertyChanged("ContentPractise");
				this.OnContentPractiseChanged();
			}
		}
	}
	
	[Association(Name="UNIT_LISTENING", Storage="_UNIT", ThisKey="ID_Unit", OtherKey="ID_Unit", IsForeignKey=true)]
	public UNIT UNIT
	{
		get
		{
			return this._UNIT.Entity;
		}
		set
		{
			UNIT previousValue = this._UNIT.Entity;
			if (((previousValue != value) 
						|| (this._UNIT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UNIT.Entity = null;
					previousValue.LISTENING = null;
				}
				this._UNIT.Entity = value;
				if ((value != null))
				{
					value.LISTENING = this;
					this._ID_Unit = value.ID_Unit;
				}
				else
				{
					this._ID_Unit = default(int);
				}
				this.SendPropertyChanged("UNIT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._UNIT = default(EntityRef<UNIT>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.LISTENING_PRACTICE")]
[DataContract()]
public partial class LISTENING_PRACTICE : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Unit;
	
	private int _Task;
	
	private int _Ques;
	
	private string _Ans;
	
	private EntityRef<UNIT> _UNIT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UnitChanging(int value);
    partial void OnID_UnitChanged();
    partial void OnTaskChanging(int value);
    partial void OnTaskChanged();
    partial void OnQuesChanging(int value);
    partial void OnQuesChanged();
    partial void OnAnsChanging(string value);
    partial void OnAnsChanged();
    #endregion
	
	public LISTENING_PRACTICE()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Unit", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				if (this._UNIT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_Task", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public int Task
	{
		get
		{
			return this._Task;
		}
		set
		{
			if ((this._Task != value))
			{
				this.OnTaskChanging(value);
				this.SendPropertyChanging();
				this._Task = value;
				this.SendPropertyChanged("Task");
				this.OnTaskChanged();
			}
		}
	}
	
	[Column(Storage="_Ques", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=3)]
	public int Ques
	{
		get
		{
			return this._Ques;
		}
		set
		{
			if ((this._Ques != value))
			{
				this.OnQuesChanging(value);
				this.SendPropertyChanging();
				this._Ques = value;
				this.SendPropertyChanged("Ques");
				this.OnQuesChanged();
			}
		}
	}
	
	[Column(Storage="_Ans", DbType="NVarChar(50)")]
	[DataMember(Order=4)]
	public string Ans
	{
		get
		{
			return this._Ans;
		}
		set
		{
			if ((this._Ans != value))
			{
				this.OnAnsChanging(value);
				this.SendPropertyChanging();
				this._Ans = value;
				this.SendPropertyChanged("Ans");
				this.OnAnsChanged();
			}
		}
	}
	
	[Association(Name="UNIT_LISTENING_PRACTICE", Storage="_UNIT", ThisKey="ID_Unit", OtherKey="ID_Unit", IsForeignKey=true)]
	public UNIT UNIT
	{
		get
		{
			return this._UNIT.Entity;
		}
		set
		{
			UNIT previousValue = this._UNIT.Entity;
			if (((previousValue != value) 
						|| (this._UNIT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UNIT.Entity = null;
					previousValue.LISTENING_PRACTICEs.Remove(this);
				}
				this._UNIT.Entity = value;
				if ((value != null))
				{
					value.LISTENING_PRACTICEs.Add(this);
					this._ID_Unit = value.ID_Unit;
				}
				else
				{
					this._ID_Unit = default(int);
				}
				this.SendPropertyChanged("UNIT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._UNIT = default(EntityRef<UNIT>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.MUSIC")]
[DataContract()]
public partial class MUSIC : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Music;
	
	private System.Nullable<int> _ID_Unit;
	
	private string _Lyric;
	
	private string _Practice;
	
	private string _Music_Path;
	
	private EntityRef<UNIT> _UNIT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_MusicChanging(int value);
    partial void OnID_MusicChanged();
    partial void OnID_UnitChanging(System.Nullable<int> value);
    partial void OnID_UnitChanged();
    partial void OnLyricChanging(string value);
    partial void OnLyricChanged();
    partial void OnPracticeChanging(string value);
    partial void OnPracticeChanged();
    partial void OnMusic_PathChanging(string value);
    partial void OnMusic_PathChanged();
    #endregion
	
	public MUSIC()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Music", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Music
	{
		get
		{
			return this._ID_Music;
		}
		set
		{
			if ((this._ID_Music != value))
			{
				this.OnID_MusicChanging(value);
				this.SendPropertyChanging();
				this._ID_Music = value;
				this.SendPropertyChanged("ID_Music");
				this.OnID_MusicChanged();
			}
		}
	}
	
	[Column(Storage="_ID_Unit", DbType="Int")]
	[DataMember(Order=2)]
	public System.Nullable<int> ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				if (this._UNIT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_Lyric", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=3)]
	public string Lyric
	{
		get
		{
			return this._Lyric;
		}
		set
		{
			if ((this._Lyric != value))
			{
				this.OnLyricChanging(value);
				this.SendPropertyChanging();
				this._Lyric = value;
				this.SendPropertyChanged("Lyric");
				this.OnLyricChanged();
			}
		}
	}
	
	[Column(Storage="_Practice", DbType="NVarChar(50)")]
	[DataMember(Order=4)]
	public string Practice
	{
		get
		{
			return this._Practice;
		}
		set
		{
			if ((this._Practice != value))
			{
				this.OnPracticeChanging(value);
				this.SendPropertyChanging();
				this._Practice = value;
				this.SendPropertyChanged("Practice");
				this.OnPracticeChanged();
			}
		}
	}
	
	[Column(Storage="_Music_Path", DbType="NVarChar(50)")]
	[DataMember(Order=5)]
	public string Music_Path
	{
		get
		{
			return this._Music_Path;
		}
		set
		{
			if ((this._Music_Path != value))
			{
				this.OnMusic_PathChanging(value);
				this.SendPropertyChanging();
				this._Music_Path = value;
				this.SendPropertyChanged("Music_Path");
				this.OnMusic_PathChanged();
			}
		}
	}
	
	[Association(Name="UNIT_MUSIC", Storage="_UNIT", ThisKey="ID_Unit", OtherKey="ID_Unit", IsForeignKey=true)]
	public UNIT UNIT
	{
		get
		{
			return this._UNIT.Entity;
		}
		set
		{
			UNIT previousValue = this._UNIT.Entity;
			if (((previousValue != value) 
						|| (this._UNIT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UNIT.Entity = null;
					previousValue.MUSICs.Remove(this);
				}
				this._UNIT.Entity = value;
				if ((value != null))
				{
					value.MUSICs.Add(this);
					this._ID_Unit = value.ID_Unit;
				}
				else
				{
					this._ID_Unit = default(Nullable<int>);
				}
				this.SendPropertyChanged("UNIT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._UNIT = default(EntityRef<UNIT>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.MUSIC_PRACTICE")]
[DataContract()]
public partial class MUSIC_PRACTICE : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Music;
	
	private int _ID_Ques;
	
	private string _Ans;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_MusicChanging(int value);
    partial void OnID_MusicChanged();
    partial void OnID_QuesChanging(int value);
    partial void OnID_QuesChanged();
    partial void OnAnsChanging(string value);
    partial void OnAnsChanged();
    #endregion
	
	public MUSIC_PRACTICE()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Music", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Music
	{
		get
		{
			return this._ID_Music;
		}
		set
		{
			if ((this._ID_Music != value))
			{
				this.OnID_MusicChanging(value);
				this.SendPropertyChanging();
				this._ID_Music = value;
				this.SendPropertyChanged("ID_Music");
				this.OnID_MusicChanged();
			}
		}
	}
	
	[Column(Storage="_ID_Ques", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public int ID_Ques
	{
		get
		{
			return this._ID_Ques;
		}
		set
		{
			if ((this._ID_Ques != value))
			{
				this.OnID_QuesChanging(value);
				this.SendPropertyChanging();
				this._ID_Ques = value;
				this.SendPropertyChanged("ID_Ques");
				this.OnID_QuesChanged();
			}
		}
	}
	
	[Column(Storage="_Ans", DbType="NVarChar(50)")]
	[DataMember(Order=3)]
	public string Ans
	{
		get
		{
			return this._Ans;
		}
		set
		{
			if ((this._Ans != value))
			{
				this.OnAnsChanging(value);
				this.SendPropertyChanging();
				this._Ans = value;
				this.SendPropertyChanged("Ans");
				this.OnAnsChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.PICTURE")]
[DataContract()]
public partial class PICTURE : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Pic;
	
	private System.Nullable<int> _ID_Unit;
	
	private System.Nullable<int> _ID_Skill;
	
	private string _Pic_Path;
	
	private EntityRef<UNIT> _UNIT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_PicChanging(int value);
    partial void OnID_PicChanged();
    partial void OnID_UnitChanging(System.Nullable<int> value);
    partial void OnID_UnitChanged();
    partial void OnID_SkillChanging(System.Nullable<int> value);
    partial void OnID_SkillChanged();
    partial void OnPic_PathChanging(string value);
    partial void OnPic_PathChanged();
    #endregion
	
	public PICTURE()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Pic", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Pic
	{
		get
		{
			return this._ID_Pic;
		}
		set
		{
			if ((this._ID_Pic != value))
			{
				this.OnID_PicChanging(value);
				this.SendPropertyChanging();
				this._ID_Pic = value;
				this.SendPropertyChanged("ID_Pic");
				this.OnID_PicChanged();
			}
		}
	}
	
	[Column(Storage="_ID_Unit", DbType="Int")]
	[DataMember(Order=2)]
	public System.Nullable<int> ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				if (this._UNIT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_ID_Skill", DbType="Int")]
	[DataMember(Order=3)]
	public System.Nullable<int> ID_Skill
	{
		get
		{
			return this._ID_Skill;
		}
		set
		{
			if ((this._ID_Skill != value))
			{
				this.OnID_SkillChanging(value);
				this.SendPropertyChanging();
				this._ID_Skill = value;
				this.SendPropertyChanged("ID_Skill");
				this.OnID_SkillChanged();
			}
		}
	}
	
	[Column(Storage="_Pic_Path", DbType="NVarChar(50)")]
	[DataMember(Order=4)]
	public string Pic_Path
	{
		get
		{
			return this._Pic_Path;
		}
		set
		{
			if ((this._Pic_Path != value))
			{
				this.OnPic_PathChanging(value);
				this.SendPropertyChanging();
				this._Pic_Path = value;
				this.SendPropertyChanged("Pic_Path");
				this.OnPic_PathChanged();
			}
		}
	}
	
	[Association(Name="UNIT_PICTURE", Storage="_UNIT", ThisKey="ID_Unit", OtherKey="ID_Unit", IsForeignKey=true)]
	public UNIT UNIT
	{
		get
		{
			return this._UNIT.Entity;
		}
		set
		{
			UNIT previousValue = this._UNIT.Entity;
			if (((previousValue != value) 
						|| (this._UNIT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UNIT.Entity = null;
					previousValue.PICTUREs.Remove(this);
				}
				this._UNIT.Entity = value;
				if ((value != null))
				{
					value.PICTUREs.Add(this);
					this._ID_Unit = value.ID_Unit;
				}
				else
				{
					this._ID_Unit = default(Nullable<int>);
				}
				this.SendPropertyChanged("UNIT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._UNIT = default(EntityRef<UNIT>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.READING")]
[DataContract()]
public partial class READING : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Unit;
	
	private string _Suggestion;
	
	private string _EText;
	
	private string _VText;
	
	private string _Audio;
	
	private EntityRef<UNIT> _UNIT;
	
	private bool serializing;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UnitChanging(int value);
    partial void OnID_UnitChanged();
    partial void OnSuggestionChanging(string value);
    partial void OnSuggestionChanged();
    partial void OnETextChanging(string value);
    partial void OnETextChanged();
    partial void OnVTextChanging(string value);
    partial void OnVTextChanged();
    partial void OnAudioChanging(string value);
    partial void OnAudioChanged();
    #endregion
	
	public READING()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Unit", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_Suggestion", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=2)]
	public string Suggestion
	{
		get
		{
			return this._Suggestion;
		}
		set
		{
			if ((this._Suggestion != value))
			{
				this.OnSuggestionChanging(value);
				this.SendPropertyChanging();
				this._Suggestion = value;
				this.SendPropertyChanged("Suggestion");
				this.OnSuggestionChanged();
			}
		}
	}
	
	[Column(Storage="_EText", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=3)]
	public string EText
	{
		get
		{
			return this._EText;
		}
		set
		{
			if ((this._EText != value))
			{
				this.OnETextChanging(value);
				this.SendPropertyChanging();
				this._EText = value;
				this.SendPropertyChanged("EText");
				this.OnETextChanged();
			}
		}
	}
	
	[Column(Storage="_VText", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=4)]
	public string VText
	{
		get
		{
			return this._VText;
		}
		set
		{
			if ((this._VText != value))
			{
				this.OnVTextChanging(value);
				this.SendPropertyChanging();
				this._VText = value;
				this.SendPropertyChanged("VText");
				this.OnVTextChanged();
			}
		}
	}
	
	[Column(Storage="_Audio", DbType="NVarChar(100)")]
	[DataMember(Order=5)]
	public string Audio
	{
		get
		{
			return this._Audio;
		}
		set
		{
			if ((this._Audio != value))
			{
				this.OnAudioChanging(value);
				this.SendPropertyChanging();
				this._Audio = value;
				this.SendPropertyChanged("Audio");
				this.OnAudioChanged();
			}
		}
	}
	
	[Association(Name="READING_UNIT", Storage="_UNIT", ThisKey="ID_Unit", OtherKey="ID_Unit", IsUnique=true, IsForeignKey=false)]
	[DataMember(Order=6, EmitDefaultValue=false)]
	public UNIT UNIT
	{
		get
		{
			if ((this.serializing 
						&& (this._UNIT.HasLoadedOrAssignedValue == false)))
			{
				return null;
			}
			return this._UNIT.Entity;
		}
		set
		{
			UNIT previousValue = this._UNIT.Entity;
			if (((previousValue != value) 
						|| (this._UNIT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UNIT.Entity = null;
					previousValue.READING = null;
				}
				this._UNIT.Entity = value;
				if ((value != null))
				{
					value.READING = this;
				}
				this.SendPropertyChanged("UNIT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._UNIT = default(EntityRef<UNIT>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
	
	[OnSerializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnSerializing(StreamingContext context)
	{
		this.serializing = true;
	}
	
	[OnSerialized()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnSerialized(StreamingContext context)
	{
		this.serializing = false;
	}
}

[Table(Name="dbo.READING_ANSWER")]
[DataContract()]
public partial class READING_ANSWER : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Unit;
	
	private int _Task;
	
	private int _Ques;
	
	private string _Ans;
	
	private EntityRef<UNIT> _UNIT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UnitChanging(int value);
    partial void OnID_UnitChanged();
    partial void OnTaskChanging(int value);
    partial void OnTaskChanged();
    partial void OnQuesChanging(int value);
    partial void OnQuesChanged();
    partial void OnAnsChanging(string value);
    partial void OnAnsChanged();
    #endregion
	
	public READING_ANSWER()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Unit", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				if (this._UNIT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_Task", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public int Task
	{
		get
		{
			return this._Task;
		}
		set
		{
			if ((this._Task != value))
			{
				this.OnTaskChanging(value);
				this.SendPropertyChanging();
				this._Task = value;
				this.SendPropertyChanged("Task");
				this.OnTaskChanged();
			}
		}
	}
	
	[Column(Storage="_Ques", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=3)]
	public int Ques
	{
		get
		{
			return this._Ques;
		}
		set
		{
			if ((this._Ques != value))
			{
				this.OnQuesChanging(value);
				this.SendPropertyChanging();
				this._Ques = value;
				this.SendPropertyChanged("Ques");
				this.OnQuesChanged();
			}
		}
	}
	
	[Column(Storage="_Ans", DbType="NVarChar(100)")]
	[DataMember(Order=4)]
	public string Ans
	{
		get
		{
			return this._Ans;
		}
		set
		{
			if ((this._Ans != value))
			{
				this.OnAnsChanging(value);
				this.SendPropertyChanging();
				this._Ans = value;
				this.SendPropertyChanged("Ans");
				this.OnAnsChanged();
			}
		}
	}
	
	[Association(Name="UNIT_READING_ANSWER", Storage="_UNIT", ThisKey="ID_Unit", OtherKey="ID_Unit", IsForeignKey=true)]
	public UNIT UNIT
	{
		get
		{
			return this._UNIT.Entity;
		}
		set
		{
			UNIT previousValue = this._UNIT.Entity;
			if (((previousValue != value) 
						|| (this._UNIT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UNIT.Entity = null;
					previousValue.READING_ANSWERs.Remove(this);
				}
				this._UNIT.Entity = value;
				if ((value != null))
				{
					value.READING_ANSWERs.Add(this);
					this._ID_Unit = value.ID_Unit;
				}
				else
				{
					this._ID_Unit = default(int);
				}
				this.SendPropertyChanged("UNIT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._UNIT = default(EntityRef<UNIT>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.READING_PRACTICE")]
[DataContract()]
public partial class READING_PRACTICE : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Unit;
	
	private int _Task;
	
	private System.Nullable<int> _Type;
	
	private string _Contents;
	
	private EntityRef<UNIT> _UNIT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UnitChanging(int value);
    partial void OnID_UnitChanged();
    partial void OnTaskChanging(int value);
    partial void OnTaskChanged();
    partial void OnTypeChanging(System.Nullable<int> value);
    partial void OnTypeChanged();
    partial void OnContentsChanging(string value);
    partial void OnContentsChanged();
    #endregion
	
	public READING_PRACTICE()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Unit", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				if (this._UNIT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_Task", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public int Task
	{
		get
		{
			return this._Task;
		}
		set
		{
			if ((this._Task != value))
			{
				this.OnTaskChanging(value);
				this.SendPropertyChanging();
				this._Task = value;
				this.SendPropertyChanged("Task");
				this.OnTaskChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="Int")]
	[DataMember(Order=3)]
	public System.Nullable<int> Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Contents", DbType="NVarChar(100)")]
	[DataMember(Order=4)]
	public string Contents
	{
		get
		{
			return this._Contents;
		}
		set
		{
			if ((this._Contents != value))
			{
				this.OnContentsChanging(value);
				this.SendPropertyChanging();
				this._Contents = value;
				this.SendPropertyChanged("Contents");
				this.OnContentsChanged();
			}
		}
	}
	
	[Association(Name="UNIT_READING_PRACTICE", Storage="_UNIT", ThisKey="ID_Unit", OtherKey="ID_Unit", IsForeignKey=true)]
	public UNIT UNIT
	{
		get
		{
			return this._UNIT.Entity;
		}
		set
		{
			UNIT previousValue = this._UNIT.Entity;
			if (((previousValue != value) 
						|| (this._UNIT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UNIT.Entity = null;
					previousValue.READING_PRACTICEs.Remove(this);
				}
				this._UNIT.Entity = value;
				if ((value != null))
				{
					value.READING_PRACTICEs.Add(this);
					this._ID_Unit = value.ID_Unit;
				}
				else
				{
					this._ID_Unit = default(int);
				}
				this.SendPropertyChanged("UNIT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._UNIT = default(EntityRef<UNIT>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.RECORD_SPEAKING")]
[DataContract()]
public partial class RECORD_SPEAKING : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Rec;
	
	private System.Nullable<int> _ID_User;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Path;
	
	private EntityRef<USER> _USER;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_RecChanging(int value);
    partial void OnID_RecChanged();
    partial void OnID_UserChanging(System.Nullable<int> value);
    partial void OnID_UserChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    #endregion
	
	public RECORD_SPEAKING()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Rec", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Rec
	{
		get
		{
			return this._ID_Rec;
		}
		set
		{
			if ((this._ID_Rec != value))
			{
				this.OnID_RecChanging(value);
				this.SendPropertyChanging();
				this._ID_Rec = value;
				this.SendPropertyChanged("ID_Rec");
				this.OnID_RecChanged();
			}
		}
	}
	
	[Column(Storage="_ID_User", DbType="Int")]
	[DataMember(Order=2)]
	public System.Nullable<int> ID_User
	{
		get
		{
			return this._ID_User;
		}
		set
		{
			if ((this._ID_User != value))
			{
				if (this._USER.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UserChanging(value);
				this.SendPropertyChanging();
				this._ID_User = value;
				this.SendPropertyChanged("ID_User");
				this.OnID_UserChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	[DataMember(Order=3)]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Path", DbType="NVarChar(50)")]
	[DataMember(Order=4)]
	public string Path
	{
		get
		{
			return this._Path;
		}
		set
		{
			if ((this._Path != value))
			{
				this.OnPathChanging(value);
				this.SendPropertyChanging();
				this._Path = value;
				this.SendPropertyChanged("Path");
				this.OnPathChanged();
			}
		}
	}
	
	[Association(Name="USER_RECORD_SPEAKING", Storage="_USER", ThisKey="ID_User", OtherKey="ID_User", IsForeignKey=true)]
	public USER USER
	{
		get
		{
			return this._USER.Entity;
		}
		set
		{
			USER previousValue = this._USER.Entity;
			if (((previousValue != value) 
						|| (this._USER.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._USER.Entity = null;
					previousValue.RECORD_SPEAKINGs.Remove(this);
				}
				this._USER.Entity = value;
				if ((value != null))
				{
					value.RECORD_SPEAKINGs.Add(this);
					this._ID_User = value.ID_User;
				}
				else
				{
					this._ID_User = default(Nullable<int>);
				}
				this.SendPropertyChanged("USER");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._USER = default(EntityRef<USER>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.SAVE_WRITING")]
[DataContract()]
public partial class SAVE_WRITING : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Save;
	
	private System.Nullable<int> _ID_User;
	
	private System.Nullable<System.DateTime> _Date;
	
	private string _Path;
	
	private EntityRef<USER> _USER;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_SaveChanging(int value);
    partial void OnID_SaveChanged();
    partial void OnID_UserChanging(System.Nullable<int> value);
    partial void OnID_UserChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    #endregion
	
	public SAVE_WRITING()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Save", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Save
	{
		get
		{
			return this._ID_Save;
		}
		set
		{
			if ((this._ID_Save != value))
			{
				this.OnID_SaveChanging(value);
				this.SendPropertyChanging();
				this._ID_Save = value;
				this.SendPropertyChanged("ID_Save");
				this.OnID_SaveChanged();
			}
		}
	}
	
	[Column(Storage="_ID_User", DbType="Int")]
	[DataMember(Order=2)]
	public System.Nullable<int> ID_User
	{
		get
		{
			return this._ID_User;
		}
		set
		{
			if ((this._ID_User != value))
			{
				if (this._USER.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UserChanging(value);
				this.SendPropertyChanging();
				this._ID_User = value;
				this.SendPropertyChanged("ID_User");
				this.OnID_UserChanged();
			}
		}
	}
	
	[Column(Storage="_Date", DbType="DateTime")]
	[DataMember(Order=3)]
	public System.Nullable<System.DateTime> Date
	{
		get
		{
			return this._Date;
		}
		set
		{
			if ((this._Date != value))
			{
				this.OnDateChanging(value);
				this.SendPropertyChanging();
				this._Date = value;
				this.SendPropertyChanged("Date");
				this.OnDateChanged();
			}
		}
	}
	
	[Column(Storage="_Path", DbType="NVarChar(50)")]
	[DataMember(Order=4)]
	public string Path
	{
		get
		{
			return this._Path;
		}
		set
		{
			if ((this._Path != value))
			{
				this.OnPathChanging(value);
				this.SendPropertyChanging();
				this._Path = value;
				this.SendPropertyChanged("Path");
				this.OnPathChanged();
			}
		}
	}
	
	[Association(Name="USER_SAVE_WRITING", Storage="_USER", ThisKey="ID_User", OtherKey="ID_User", IsForeignKey=true)]
	public USER USER
	{
		get
		{
			return this._USER.Entity;
		}
		set
		{
			USER previousValue = this._USER.Entity;
			if (((previousValue != value) 
						|| (this._USER.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._USER.Entity = null;
					previousValue.SAVE_WRITINGs.Remove(this);
				}
				this._USER.Entity = value;
				if ((value != null))
				{
					value.SAVE_WRITINGs.Add(this);
					this._ID_User = value.ID_User;
				}
				else
				{
					this._ID_User = default(Nullable<int>);
				}
				this.SendPropertyChanged("USER");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._USER = default(EntityRef<USER>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.SPEAKING")]
[DataContract()]
public partial class SPEAKING : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Unit;
	
	private string _Suggestion;
	
	private EntityRef<UNIT> _UNIT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UnitChanging(int value);
    partial void OnID_UnitChanged();
    partial void OnSuggestionChanging(string value);
    partial void OnSuggestionChanged();
    #endregion
	
	public SPEAKING()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Unit", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				if (this._UNIT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_Suggestion", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=2)]
	public string Suggestion
	{
		get
		{
			return this._Suggestion;
		}
		set
		{
			if ((this._Suggestion != value))
			{
				this.OnSuggestionChanging(value);
				this.SendPropertyChanging();
				this._Suggestion = value;
				this.SendPropertyChanged("Suggestion");
				this.OnSuggestionChanged();
			}
		}
	}
	
	[Association(Name="UNIT_SPEAKING", Storage="_UNIT", ThisKey="ID_Unit", OtherKey="ID_Unit", IsForeignKey=true)]
	public UNIT UNIT
	{
		get
		{
			return this._UNIT.Entity;
		}
		set
		{
			UNIT previousValue = this._UNIT.Entity;
			if (((previousValue != value) 
						|| (this._UNIT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UNIT.Entity = null;
					previousValue.SPEAKING = null;
				}
				this._UNIT.Entity = value;
				if ((value != null))
				{
					value.SPEAKING = this;
					this._ID_Unit = value.ID_Unit;
				}
				else
				{
					this._ID_Unit = default(int);
				}
				this.SendPropertyChanged("UNIT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._UNIT = default(EntityRef<UNIT>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.TEST")]
[DataContract()]
public partial class TEST : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Text;
	
	private int _ID_Part;
	
	private int _ID_Ques;
	
	private string _Ques;
	
	private string _Ans;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_TextChanging(int value);
    partial void OnID_TextChanged();
    partial void OnID_PartChanging(int value);
    partial void OnID_PartChanged();
    partial void OnID_QuesChanging(int value);
    partial void OnID_QuesChanged();
    partial void OnQuesChanging(string value);
    partial void OnQuesChanged();
    partial void OnAnsChanging(string value);
    partial void OnAnsChanged();
    #endregion
	
	public TEST()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Text", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Text
	{
		get
		{
			return this._ID_Text;
		}
		set
		{
			if ((this._ID_Text != value))
			{
				this.OnID_TextChanging(value);
				this.SendPropertyChanging();
				this._ID_Text = value;
				this.SendPropertyChanged("ID_Text");
				this.OnID_TextChanged();
			}
		}
	}
	
	[Column(Storage="_ID_Part", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public int ID_Part
	{
		get
		{
			return this._ID_Part;
		}
		set
		{
			if ((this._ID_Part != value))
			{
				this.OnID_PartChanging(value);
				this.SendPropertyChanging();
				this._ID_Part = value;
				this.SendPropertyChanged("ID_Part");
				this.OnID_PartChanged();
			}
		}
	}
	
	[Column(Storage="_ID_Ques", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=3)]
	public int ID_Ques
	{
		get
		{
			return this._ID_Ques;
		}
		set
		{
			if ((this._ID_Ques != value))
			{
				this.OnID_QuesChanging(value);
				this.SendPropertyChanging();
				this._ID_Ques = value;
				this.SendPropertyChanged("ID_Ques");
				this.OnID_QuesChanged();
			}
		}
	}
	
	[Column(Storage="_Ques", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=4)]
	public string Ques
	{
		get
		{
			return this._Ques;
		}
		set
		{
			if ((this._Ques != value))
			{
				this.OnQuesChanging(value);
				this.SendPropertyChanging();
				this._Ques = value;
				this.SendPropertyChanged("Ques");
				this.OnQuesChanged();
			}
		}
	}
	
	[Column(Storage="_Ans", DbType="NText", UpdateCheck=UpdateCheck.Never)]
	[DataMember(Order=5)]
	public string Ans
	{
		get
		{
			return this._Ans;
		}
		set
		{
			if ((this._Ans != value))
			{
				this.OnAnsChanging(value);
				this.SendPropertyChanging();
				this._Ans = value;
				this.SendPropertyChanged("Ans");
				this.OnAnsChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.UNIT")]
[DataContract()]
public partial class UNIT : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Unit;
	
	private string _Name;
	
	private EntitySet<WRITING> _WRITINGs;
	
	private EntitySet<GRAMMAR_PRACTICE> _GRAMMAR_PRACTICEs;
	
	private EntityRef<LANGUAGE_FOCUS> _LANGUAGE_FOCUS;
	
	private EntityRef<LISTENING> _LISTENING;
	
	private EntitySet<LISTENING_PRACTICE> _LISTENING_PRACTICEs;
	
	private EntitySet<MUSIC> _MUSICs;
	
	private EntitySet<PICTURE> _PICTUREs;
	
	private EntitySet<READING_ANSWER> _READING_ANSWERs;
	
	private EntitySet<READING_PRACTICE> _READING_PRACTICEs;
	
	private EntityRef<SPEAKING> _SPEAKING;
	
	private EntitySet<USER_MARK> _USER_MARKs;
	
	private EntitySet<VOCABULARY> _VOCABULARies;
	
	private EntityRef<READING> _READING;
	
	private bool serializing;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UnitChanging(int value);
    partial void OnID_UnitChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
	
	public UNIT()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Unit", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				if (this._READING.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50)")]
	[DataMember(Order=2)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Association(Name="UNIT_WRITING", Storage="_WRITINGs", ThisKey="ID_Unit", OtherKey="ID_Unit")]
	[DataMember(Order=3, EmitDefaultValue=false)]
	public EntitySet<WRITING> WRITINGs
	{
		get
		{
			if ((this.serializing 
						&& (this._WRITINGs.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._WRITINGs;
		}
		set
		{
			this._WRITINGs.Assign(value);
		}
	}
	
	[Association(Name="UNIT_GRAMMAR_PRACTICE", Storage="_GRAMMAR_PRACTICEs", ThisKey="ID_Unit", OtherKey="ID_Unit")]
	[DataMember(Order=4, EmitDefaultValue=false)]
	public EntitySet<GRAMMAR_PRACTICE> GRAMMAR_PRACTICEs
	{
		get
		{
			if ((this.serializing 
						&& (this._GRAMMAR_PRACTICEs.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._GRAMMAR_PRACTICEs;
		}
		set
		{
			this._GRAMMAR_PRACTICEs.Assign(value);
		}
	}
	
	[Association(Name="UNIT_LANGUAGE_FOCUS", Storage="_LANGUAGE_FOCUS", ThisKey="ID_Unit", OtherKey="ID_Unit", IsUnique=true, IsForeignKey=false)]
	[DataMember(Order=5, EmitDefaultValue=false)]
	public LANGUAGE_FOCUS LANGUAGE_FOCUS
	{
		get
		{
			if ((this.serializing 
						&& (this._LANGUAGE_FOCUS.HasLoadedOrAssignedValue == false)))
			{
				return null;
			}
			return this._LANGUAGE_FOCUS.Entity;
		}
		set
		{
			LANGUAGE_FOCUS previousValue = this._LANGUAGE_FOCUS.Entity;
			if (((previousValue != value) 
						|| (this._LANGUAGE_FOCUS.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LANGUAGE_FOCUS.Entity = null;
					previousValue.UNIT = null;
				}
				this._LANGUAGE_FOCUS.Entity = value;
				if ((value != null))
				{
					value.UNIT = this;
				}
				this.SendPropertyChanged("LANGUAGE_FOCUS");
			}
		}
	}
	
	[Association(Name="UNIT_LISTENING", Storage="_LISTENING", ThisKey="ID_Unit", OtherKey="ID_Unit", IsUnique=true, IsForeignKey=false)]
	[DataMember(Order=6, EmitDefaultValue=false)]
	public LISTENING LISTENING
	{
		get
		{
			if ((this.serializing 
						&& (this._LISTENING.HasLoadedOrAssignedValue == false)))
			{
				return null;
			}
			return this._LISTENING.Entity;
		}
		set
		{
			LISTENING previousValue = this._LISTENING.Entity;
			if (((previousValue != value) 
						|| (this._LISTENING.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._LISTENING.Entity = null;
					previousValue.UNIT = null;
				}
				this._LISTENING.Entity = value;
				if ((value != null))
				{
					value.UNIT = this;
				}
				this.SendPropertyChanged("LISTENING");
			}
		}
	}
	
	[Association(Name="UNIT_LISTENING_PRACTICE", Storage="_LISTENING_PRACTICEs", ThisKey="ID_Unit", OtherKey="ID_Unit")]
	[DataMember(Order=7, EmitDefaultValue=false)]
	public EntitySet<LISTENING_PRACTICE> LISTENING_PRACTICEs
	{
		get
		{
			if ((this.serializing 
						&& (this._LISTENING_PRACTICEs.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._LISTENING_PRACTICEs;
		}
		set
		{
			this._LISTENING_PRACTICEs.Assign(value);
		}
	}
	
	[Association(Name="UNIT_MUSIC", Storage="_MUSICs", ThisKey="ID_Unit", OtherKey="ID_Unit")]
	[DataMember(Order=8, EmitDefaultValue=false)]
	public EntitySet<MUSIC> MUSICs
	{
		get
		{
			if ((this.serializing 
						&& (this._MUSICs.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._MUSICs;
		}
		set
		{
			this._MUSICs.Assign(value);
		}
	}
	
	[Association(Name="UNIT_PICTURE", Storage="_PICTUREs", ThisKey="ID_Unit", OtherKey="ID_Unit")]
	[DataMember(Order=9, EmitDefaultValue=false)]
	public EntitySet<PICTURE> PICTUREs
	{
		get
		{
			if ((this.serializing 
						&& (this._PICTUREs.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._PICTUREs;
		}
		set
		{
			this._PICTUREs.Assign(value);
		}
	}
	
	[Association(Name="UNIT_READING_ANSWER", Storage="_READING_ANSWERs", ThisKey="ID_Unit", OtherKey="ID_Unit")]
	[DataMember(Order=10, EmitDefaultValue=false)]
	public EntitySet<READING_ANSWER> READING_ANSWERs
	{
		get
		{
			if ((this.serializing 
						&& (this._READING_ANSWERs.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._READING_ANSWERs;
		}
		set
		{
			this._READING_ANSWERs.Assign(value);
		}
	}
	
	[Association(Name="UNIT_READING_PRACTICE", Storage="_READING_PRACTICEs", ThisKey="ID_Unit", OtherKey="ID_Unit")]
	[DataMember(Order=11, EmitDefaultValue=false)]
	public EntitySet<READING_PRACTICE> READING_PRACTICEs
	{
		get
		{
			if ((this.serializing 
						&& (this._READING_PRACTICEs.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._READING_PRACTICEs;
		}
		set
		{
			this._READING_PRACTICEs.Assign(value);
		}
	}
	
	[Association(Name="UNIT_SPEAKING", Storage="_SPEAKING", ThisKey="ID_Unit", OtherKey="ID_Unit", IsUnique=true, IsForeignKey=false)]
	[DataMember(Order=12, EmitDefaultValue=false)]
	public SPEAKING SPEAKING
	{
		get
		{
			if ((this.serializing 
						&& (this._SPEAKING.HasLoadedOrAssignedValue == false)))
			{
				return null;
			}
			return this._SPEAKING.Entity;
		}
		set
		{
			SPEAKING previousValue = this._SPEAKING.Entity;
			if (((previousValue != value) 
						|| (this._SPEAKING.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SPEAKING.Entity = null;
					previousValue.UNIT = null;
				}
				this._SPEAKING.Entity = value;
				if ((value != null))
				{
					value.UNIT = this;
				}
				this.SendPropertyChanged("SPEAKING");
			}
		}
	}
	
	[Association(Name="UNIT_USER_MARK", Storage="_USER_MARKs", ThisKey="ID_Unit", OtherKey="ID_Unit")]
	[DataMember(Order=13, EmitDefaultValue=false)]
	public EntitySet<USER_MARK> USER_MARKs
	{
		get
		{
			if ((this.serializing 
						&& (this._USER_MARKs.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._USER_MARKs;
		}
		set
		{
			this._USER_MARKs.Assign(value);
		}
	}
	
	[Association(Name="UNIT_VOCABULARY", Storage="_VOCABULARies", ThisKey="ID_Unit", OtherKey="ID_Unit")]
	[DataMember(Order=14, EmitDefaultValue=false)]
	public EntitySet<VOCABULARY> VOCABULARies
	{
		get
		{
			if ((this.serializing 
						&& (this._VOCABULARies.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._VOCABULARies;
		}
		set
		{
			this._VOCABULARies.Assign(value);
		}
	}
	
	[Association(Name="READING_UNIT", Storage="_READING", ThisKey="ID_Unit", OtherKey="ID_Unit", IsForeignKey=true)]
	public READING READING
	{
		get
		{
			return this._READING.Entity;
		}
		set
		{
			READING previousValue = this._READING.Entity;
			if (((previousValue != value) 
						|| (this._READING.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._READING.Entity = null;
					previousValue.UNIT = null;
				}
				this._READING.Entity = value;
				if ((value != null))
				{
					value.UNIT = this;
					this._ID_Unit = value.ID_Unit;
				}
				else
				{
					this._ID_Unit = default(int);
				}
				this.SendPropertyChanged("READING");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_WRITINGs(WRITING entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = this;
	}
	
	private void detach_WRITINGs(WRITING entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = null;
	}
	
	private void attach_GRAMMAR_PRACTICEs(GRAMMAR_PRACTICE entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = this;
	}
	
	private void detach_GRAMMAR_PRACTICEs(GRAMMAR_PRACTICE entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = null;
	}
	
	private void attach_LISTENING_PRACTICEs(LISTENING_PRACTICE entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = this;
	}
	
	private void detach_LISTENING_PRACTICEs(LISTENING_PRACTICE entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = null;
	}
	
	private void attach_MUSICs(MUSIC entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = this;
	}
	
	private void detach_MUSICs(MUSIC entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = null;
	}
	
	private void attach_PICTUREs(PICTURE entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = this;
	}
	
	private void detach_PICTUREs(PICTURE entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = null;
	}
	
	private void attach_READING_ANSWERs(READING_ANSWER entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = this;
	}
	
	private void detach_READING_ANSWERs(READING_ANSWER entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = null;
	}
	
	private void attach_READING_PRACTICEs(READING_PRACTICE entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = this;
	}
	
	private void detach_READING_PRACTICEs(READING_PRACTICE entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = null;
	}
	
	private void attach_USER_MARKs(USER_MARK entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = this;
	}
	
	private void detach_USER_MARKs(USER_MARK entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = null;
	}
	
	private void attach_VOCABULARies(VOCABULARY entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = this;
	}
	
	private void detach_VOCABULARies(VOCABULARY entity)
	{
		this.SendPropertyChanging();
		entity.UNIT = null;
	}
	
	private void Initialize()
	{
		this._WRITINGs = new EntitySet<WRITING>(new Action<WRITING>(this.attach_WRITINGs), new Action<WRITING>(this.detach_WRITINGs));
		this._GRAMMAR_PRACTICEs = new EntitySet<GRAMMAR_PRACTICE>(new Action<GRAMMAR_PRACTICE>(this.attach_GRAMMAR_PRACTICEs), new Action<GRAMMAR_PRACTICE>(this.detach_GRAMMAR_PRACTICEs));
		this._LANGUAGE_FOCUS = default(EntityRef<LANGUAGE_FOCUS>);
		this._LISTENING = default(EntityRef<LISTENING>);
		this._LISTENING_PRACTICEs = new EntitySet<LISTENING_PRACTICE>(new Action<LISTENING_PRACTICE>(this.attach_LISTENING_PRACTICEs), new Action<LISTENING_PRACTICE>(this.detach_LISTENING_PRACTICEs));
		this._MUSICs = new EntitySet<MUSIC>(new Action<MUSIC>(this.attach_MUSICs), new Action<MUSIC>(this.detach_MUSICs));
		this._PICTUREs = new EntitySet<PICTURE>(new Action<PICTURE>(this.attach_PICTUREs), new Action<PICTURE>(this.detach_PICTUREs));
		this._READING_ANSWERs = new EntitySet<READING_ANSWER>(new Action<READING_ANSWER>(this.attach_READING_ANSWERs), new Action<READING_ANSWER>(this.detach_READING_ANSWERs));
		this._READING_PRACTICEs = new EntitySet<READING_PRACTICE>(new Action<READING_PRACTICE>(this.attach_READING_PRACTICEs), new Action<READING_PRACTICE>(this.detach_READING_PRACTICEs));
		this._SPEAKING = default(EntityRef<SPEAKING>);
		this._USER_MARKs = new EntitySet<USER_MARK>(new Action<USER_MARK>(this.attach_USER_MARKs), new Action<USER_MARK>(this.detach_USER_MARKs));
		this._VOCABULARies = new EntitySet<VOCABULARY>(new Action<VOCABULARY>(this.attach_VOCABULARies), new Action<VOCABULARY>(this.detach_VOCABULARies));
		this._READING = default(EntityRef<READING>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
	
	[OnSerializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnSerializing(StreamingContext context)
	{
		this.serializing = true;
	}
	
	[OnSerialized()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnSerialized(StreamingContext context)
	{
		this.serializing = false;
	}
}

[Table(Name="dbo.[USER]")]
[DataContract()]
public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_User;
	
	private string _Name;
	
	private System.Nullable<System.DateTime> _Birthday;
	
	private string _School;
	
	private string _Username;
	
	private string _Password;
	
	private System.Nullable<double> _Mark;
	
	private System.Nullable<int> _ID_Unit;
	
	private EntitySet<RECORD_SPEAKING> _RECORD_SPEAKINGs;
	
	private EntitySet<SAVE_WRITING> _SAVE_WRITINGs;
	
	private EntitySet<USER_MARK> _USER_MARKs;
	
	private bool serializing;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UserChanging(int value);
    partial void OnID_UserChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBirthdayChanging(System.Nullable<System.DateTime> value);
    partial void OnBirthdayChanged();
    partial void OnSchoolChanging(string value);
    partial void OnSchoolChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnMarkChanging(System.Nullable<double> value);
    partial void OnMarkChanged();
    partial void OnID_UnitChanging(System.Nullable<int> value);
    partial void OnID_UnitChanged();
    #endregion
	
	public USER()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_User", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_User
	{
		get
		{
			return this._ID_User;
		}
		set
		{
			if ((this._ID_User != value))
			{
				this.OnID_UserChanging(value);
				this.SendPropertyChanging();
				this._ID_User = value;
				this.SendPropertyChanged("ID_User");
				this.OnID_UserChanged();
			}
		}
	}
	
	[Column(Storage="_Name", DbType="NVarChar(50)")]
	[DataMember(Order=2)]
	public string Name
	{
		get
		{
			return this._Name;
		}
		set
		{
			if ((this._Name != value))
			{
				this.OnNameChanging(value);
				this.SendPropertyChanging();
				this._Name = value;
				this.SendPropertyChanged("Name");
				this.OnNameChanged();
			}
		}
	}
	
	[Column(Storage="_Birthday", DbType="DateTime")]
	[DataMember(Order=3)]
	public System.Nullable<System.DateTime> Birthday
	{
		get
		{
			return this._Birthday;
		}
		set
		{
			if ((this._Birthday != value))
			{
				this.OnBirthdayChanging(value);
				this.SendPropertyChanging();
				this._Birthday = value;
				this.SendPropertyChanged("Birthday");
				this.OnBirthdayChanged();
			}
		}
	}
	
	[Column(Storage="_School", DbType="NVarChar(50)")]
	[DataMember(Order=4)]
	public string School
	{
		get
		{
			return this._School;
		}
		set
		{
			if ((this._School != value))
			{
				this.OnSchoolChanging(value);
				this.SendPropertyChanging();
				this._School = value;
				this.SendPropertyChanged("School");
				this.OnSchoolChanged();
			}
		}
	}
	
	[Column(Storage="_Username", DbType="VarChar(50)")]
	[DataMember(Order=5)]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[Column(Storage="_Password", DbType="VarChar(50)")]
	[DataMember(Order=6)]
	public string Password
	{
		get
		{
			return this._Password;
		}
		set
		{
			if ((this._Password != value))
			{
				this.OnPasswordChanging(value);
				this.SendPropertyChanging();
				this._Password = value;
				this.SendPropertyChanged("Password");
				this.OnPasswordChanged();
			}
		}
	}
	
	[Column(Storage="_Mark", DbType="Float")]
	[DataMember(Order=7)]
	public System.Nullable<double> Mark
	{
		get
		{
			return this._Mark;
		}
		set
		{
			if ((this._Mark != value))
			{
				this.OnMarkChanging(value);
				this.SendPropertyChanging();
				this._Mark = value;
				this.SendPropertyChanged("Mark");
				this.OnMarkChanged();
			}
		}
	}
	
	[Column(Storage="_ID_Unit", DbType="Int")]
	[DataMember(Order=8)]
	public System.Nullable<int> ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Association(Name="USER_RECORD_SPEAKING", Storage="_RECORD_SPEAKINGs", ThisKey="ID_User", OtherKey="ID_User")]
	[DataMember(Order=9, EmitDefaultValue=false)]
	public EntitySet<RECORD_SPEAKING> RECORD_SPEAKINGs
	{
		get
		{
			if ((this.serializing 
						&& (this._RECORD_SPEAKINGs.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._RECORD_SPEAKINGs;
		}
		set
		{
			this._RECORD_SPEAKINGs.Assign(value);
		}
	}
	
	[Association(Name="USER_SAVE_WRITING", Storage="_SAVE_WRITINGs", ThisKey="ID_User", OtherKey="ID_User")]
	[DataMember(Order=10, EmitDefaultValue=false)]
	public EntitySet<SAVE_WRITING> SAVE_WRITINGs
	{
		get
		{
			if ((this.serializing 
						&& (this._SAVE_WRITINGs.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._SAVE_WRITINGs;
		}
		set
		{
			this._SAVE_WRITINGs.Assign(value);
		}
	}
	
	[Association(Name="USER_USER_MARK", Storage="_USER_MARKs", ThisKey="ID_User", OtherKey="ID_User")]
	[DataMember(Order=11, EmitDefaultValue=false)]
	public EntitySet<USER_MARK> USER_MARKs
	{
		get
		{
			if ((this.serializing 
						&& (this._USER_MARKs.HasLoadedOrAssignedValues == false)))
			{
				return null;
			}
			return this._USER_MARKs;
		}
		set
		{
			this._USER_MARKs.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_RECORD_SPEAKINGs(RECORD_SPEAKING entity)
	{
		this.SendPropertyChanging();
		entity.USER = this;
	}
	
	private void detach_RECORD_SPEAKINGs(RECORD_SPEAKING entity)
	{
		this.SendPropertyChanging();
		entity.USER = null;
	}
	
	private void attach_SAVE_WRITINGs(SAVE_WRITING entity)
	{
		this.SendPropertyChanging();
		entity.USER = this;
	}
	
	private void detach_SAVE_WRITINGs(SAVE_WRITING entity)
	{
		this.SendPropertyChanging();
		entity.USER = null;
	}
	
	private void attach_USER_MARKs(USER_MARK entity)
	{
		this.SendPropertyChanging();
		entity.USER = this;
	}
	
	private void detach_USER_MARKs(USER_MARK entity)
	{
		this.SendPropertyChanging();
		entity.USER = null;
	}
	
	private void Initialize()
	{
		this._RECORD_SPEAKINGs = new EntitySet<RECORD_SPEAKING>(new Action<RECORD_SPEAKING>(this.attach_RECORD_SPEAKINGs), new Action<RECORD_SPEAKING>(this.detach_RECORD_SPEAKINGs));
		this._SAVE_WRITINGs = new EntitySet<SAVE_WRITING>(new Action<SAVE_WRITING>(this.attach_SAVE_WRITINGs), new Action<SAVE_WRITING>(this.detach_SAVE_WRITINGs));
		this._USER_MARKs = new EntitySet<USER_MARK>(new Action<USER_MARK>(this.attach_USER_MARKs), new Action<USER_MARK>(this.detach_USER_MARKs));
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
	
	[OnSerializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnSerializing(StreamingContext context)
	{
		this.serializing = true;
	}
	
	[OnSerialized()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnSerialized(StreamingContext context)
	{
		this.serializing = false;
	}
}

[Table(Name="dbo.USER_MARK")]
[DataContract()]
public partial class USER_MARK : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_User;
	
	private int _ID_Unit;
	
	private int _ID_Skill;
	
	private System.Nullable<double> _Mark_Unit;
	
	private System.Nullable<double> _Mark_Skill;
	
	private EntityRef<UNIT> _UNIT;
	
	private EntityRef<USER> _USER;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_UserChanging(int value);
    partial void OnID_UserChanged();
    partial void OnID_UnitChanging(int value);
    partial void OnID_UnitChanged();
    partial void OnID_SkillChanging(int value);
    partial void OnID_SkillChanged();
    partial void OnMark_UnitChanging(System.Nullable<double> value);
    partial void OnMark_UnitChanged();
    partial void OnMark_SkillChanging(System.Nullable<double> value);
    partial void OnMark_SkillChanged();
    #endregion
	
	public USER_MARK()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_User", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=1)]
	public int ID_User
	{
		get
		{
			return this._ID_User;
		}
		set
		{
			if ((this._ID_User != value))
			{
				if (this._USER.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UserChanging(value);
				this.SendPropertyChanging();
				this._ID_User = value;
				this.SendPropertyChanged("ID_User");
				this.OnID_UserChanged();
			}
		}
	}
	
	[Column(Storage="_ID_Unit", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=2)]
	public int ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				if (this._UNIT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_ID_Skill", DbType="Int NOT NULL", IsPrimaryKey=true)]
	[DataMember(Order=3)]
	public int ID_Skill
	{
		get
		{
			return this._ID_Skill;
		}
		set
		{
			if ((this._ID_Skill != value))
			{
				this.OnID_SkillChanging(value);
				this.SendPropertyChanging();
				this._ID_Skill = value;
				this.SendPropertyChanged("ID_Skill");
				this.OnID_SkillChanged();
			}
		}
	}
	
	[Column(Storage="_Mark_Unit", DbType="Float")]
	[DataMember(Order=4)]
	public System.Nullable<double> Mark_Unit
	{
		get
		{
			return this._Mark_Unit;
		}
		set
		{
			if ((this._Mark_Unit != value))
			{
				this.OnMark_UnitChanging(value);
				this.SendPropertyChanging();
				this._Mark_Unit = value;
				this.SendPropertyChanged("Mark_Unit");
				this.OnMark_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_Mark_Skill", DbType="Float")]
	[DataMember(Order=5)]
	public System.Nullable<double> Mark_Skill
	{
		get
		{
			return this._Mark_Skill;
		}
		set
		{
			if ((this._Mark_Skill != value))
			{
				this.OnMark_SkillChanging(value);
				this.SendPropertyChanging();
				this._Mark_Skill = value;
				this.SendPropertyChanged("Mark_Skill");
				this.OnMark_SkillChanged();
			}
		}
	}
	
	[Association(Name="UNIT_USER_MARK", Storage="_UNIT", ThisKey="ID_Unit", OtherKey="ID_Unit", IsForeignKey=true)]
	public UNIT UNIT
	{
		get
		{
			return this._UNIT.Entity;
		}
		set
		{
			UNIT previousValue = this._UNIT.Entity;
			if (((previousValue != value) 
						|| (this._UNIT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UNIT.Entity = null;
					previousValue.USER_MARKs.Remove(this);
				}
				this._UNIT.Entity = value;
				if ((value != null))
				{
					value.USER_MARKs.Add(this);
					this._ID_Unit = value.ID_Unit;
				}
				else
				{
					this._ID_Unit = default(int);
				}
				this.SendPropertyChanged("UNIT");
			}
		}
	}
	
	[Association(Name="USER_USER_MARK", Storage="_USER", ThisKey="ID_User", OtherKey="ID_User", IsForeignKey=true)]
	public USER USER
	{
		get
		{
			return this._USER.Entity;
		}
		set
		{
			USER previousValue = this._USER.Entity;
			if (((previousValue != value) 
						|| (this._USER.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._USER.Entity = null;
					previousValue.USER_MARKs.Remove(this);
				}
				this._USER.Entity = value;
				if ((value != null))
				{
					value.USER_MARKs.Add(this);
					this._ID_User = value.ID_User;
				}
				else
				{
					this._ID_User = default(int);
				}
				this.SendPropertyChanged("USER");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._UNIT = default(EntityRef<UNIT>);
		this._USER = default(EntityRef<USER>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}

[Table(Name="dbo.VOCABULARY")]
[DataContract()]
public partial class VOCABULARY : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ID_Voc;
	
	private System.Nullable<int> _ID_Unit;
	
	private System.Nullable<int> _ID_Skill;
	
	private string _Type;
	
	private string _Eword;
	
	private string _Vword;
	
	private string _Voice_Path;
	
	private EntityRef<UNIT> _UNIT;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_VocChanging(int value);
    partial void OnID_VocChanged();
    partial void OnID_UnitChanging(System.Nullable<int> value);
    partial void OnID_UnitChanged();
    partial void OnID_SkillChanging(System.Nullable<int> value);
    partial void OnID_SkillChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnEwordChanging(string value);
    partial void OnEwordChanged();
    partial void OnVwordChanging(string value);
    partial void OnVwordChanged();
    partial void OnVoice_PathChanging(string value);
    partial void OnVoice_PathChanged();
    #endregion
	
	public VOCABULARY()
	{
		this.Initialize();
	}
	
	[Column(Storage="_ID_Voc", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	[DataMember(Order=1)]
	public int ID_Voc
	{
		get
		{
			return this._ID_Voc;
		}
		set
		{
			if ((this._ID_Voc != value))
			{
				this.OnID_VocChanging(value);
				this.SendPropertyChanging();
				this._ID_Voc = value;
				this.SendPropertyChanged("ID_Voc");
				this.OnID_VocChanged();
			}
		}
	}
	
	[Column(Storage="_ID_Unit", DbType="Int")]
	[DataMember(Order=2)]
	public System.Nullable<int> ID_Unit
	{
		get
		{
			return this._ID_Unit;
		}
		set
		{
			if ((this._ID_Unit != value))
			{
				if (this._UNIT.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnID_UnitChanging(value);
				this.SendPropertyChanging();
				this._ID_Unit = value;
				this.SendPropertyChanged("ID_Unit");
				this.OnID_UnitChanged();
			}
		}
	}
	
	[Column(Storage="_ID_Skill", DbType="Int")]
	[DataMember(Order=3)]
	public System.Nullable<int> ID_Skill
	{
		get
		{
			return this._ID_Skill;
		}
		set
		{
			if ((this._ID_Skill != value))
			{
				this.OnID_SkillChanging(value);
				this.SendPropertyChanging();
				this._ID_Skill = value;
				this.SendPropertyChanged("ID_Skill");
				this.OnID_SkillChanged();
			}
		}
	}
	
	[Column(Storage="_Type", DbType="VarChar(10)")]
	[DataMember(Order=4)]
	public string Type
	{
		get
		{
			return this._Type;
		}
		set
		{
			if ((this._Type != value))
			{
				this.OnTypeChanging(value);
				this.SendPropertyChanging();
				this._Type = value;
				this.SendPropertyChanged("Type");
				this.OnTypeChanged();
			}
		}
	}
	
	[Column(Storage="_Eword", DbType="NVarChar(50)")]
	[DataMember(Order=5)]
	public string Eword
	{
		get
		{
			return this._Eword;
		}
		set
		{
			if ((this._Eword != value))
			{
				this.OnEwordChanging(value);
				this.SendPropertyChanging();
				this._Eword = value;
				this.SendPropertyChanged("Eword");
				this.OnEwordChanged();
			}
		}
	}
	
	[Column(Storage="_Vword", DbType="NVarChar(100)")]
	[DataMember(Order=6)]
	public string Vword
	{
		get
		{
			return this._Vword;
		}
		set
		{
			if ((this._Vword != value))
			{
				this.OnVwordChanging(value);
				this.SendPropertyChanging();
				this._Vword = value;
				this.SendPropertyChanged("Vword");
				this.OnVwordChanged();
			}
		}
	}
	
	[Column(Storage="_Voice_Path", DbType="NVarChar(50)")]
	[DataMember(Order=7)]
	public string Voice_Path
	{
		get
		{
			return this._Voice_Path;
		}
		set
		{
			if ((this._Voice_Path != value))
			{
				this.OnVoice_PathChanging(value);
				this.SendPropertyChanging();
				this._Voice_Path = value;
				this.SendPropertyChanged("Voice_Path");
				this.OnVoice_PathChanged();
			}
		}
	}
	
	[Association(Name="UNIT_VOCABULARY", Storage="_UNIT", ThisKey="ID_Unit", OtherKey="ID_Unit", IsForeignKey=true)]
	public UNIT UNIT
	{
		get
		{
			return this._UNIT.Entity;
		}
		set
		{
			UNIT previousValue = this._UNIT.Entity;
			if (((previousValue != value) 
						|| (this._UNIT.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UNIT.Entity = null;
					previousValue.VOCABULARies.Remove(this);
				}
				this._UNIT.Entity = value;
				if ((value != null))
				{
					value.VOCABULARies.Add(this);
					this._ID_Unit = value.ID_Unit;
				}
				else
				{
					this._ID_Unit = default(Nullable<int>);
				}
				this.SendPropertyChanged("UNIT");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void Initialize()
	{
		this._UNIT = default(EntityRef<UNIT>);
		OnCreated();
	}
	
	[OnDeserializing()]
	[System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
	public void OnDeserializing(StreamingContext context)
	{
		this.Initialize();
	}
}
#pragma warning restore 1591
