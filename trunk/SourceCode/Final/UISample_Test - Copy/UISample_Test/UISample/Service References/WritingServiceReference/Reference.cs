//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 3.0.40624.0
// 
namespace UISample.WritingServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WRITING", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class WRITING : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ID_UnitField;
        
        private int ID_TaskField;
        
        private int ID_QuesField;
        
        private string QuesField;
        
        private string AnsField;
        
        private string TemplateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID_Unit {
            get {
                return this.ID_UnitField;
            }
            set {
                if ((this.ID_UnitField.Equals(value) != true)) {
                    this.ID_UnitField = value;
                    this.RaisePropertyChanged("ID_Unit");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=1)]
        public int ID_Task {
            get {
                return this.ID_TaskField;
            }
            set {
                if ((this.ID_TaskField.Equals(value) != true)) {
                    this.ID_TaskField = value;
                    this.RaisePropertyChanged("ID_Task");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=2)]
        public int ID_Ques {
            get {
                return this.ID_QuesField;
            }
            set {
                if ((this.ID_QuesField.Equals(value) != true)) {
                    this.ID_QuesField = value;
                    this.RaisePropertyChanged("ID_Ques");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=3)]
        public string Ques {
            get {
                return this.QuesField;
            }
            set {
                if ((object.ReferenceEquals(this.QuesField, value) != true)) {
                    this.QuesField = value;
                    this.RaisePropertyChanged("Ques");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=4)]
        public string Ans {
            get {
                return this.AnsField;
            }
            set {
                if ((object.ReferenceEquals(this.AnsField, value) != true)) {
                    this.AnsField = value;
                    this.RaisePropertyChanged("Ans");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(Order=5)]
        public string Template {
            get {
                return this.TemplateField;
            }
            set {
                if ((object.ReferenceEquals(this.TemplateField, value) != true)) {
                    this.TemplateField = value;
                    this.RaisePropertyChanged("Template");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WritingServiceReference.IWriting_Service")]
    public interface IWriting_Service {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWriting_Service/DoWork", ReplyAction="http://tempuri.org/IWriting_Service/DoWorkResponse")]
        System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState);
        
        void EndDoWork(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IWriting_Service/GetWritings", ReplyAction="http://tempuri.org/IWriting_Service/GetWritingsResponse")]
        System.IAsyncResult BeginGetWritings(int ID_Unit, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<UISample.WritingServiceReference.WRITING> EndGetWritings(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IWriting_ServiceChannel : UISample.WritingServiceReference.IWriting_Service, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetWritingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetWritingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<UISample.WritingServiceReference.WRITING> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<UISample.WritingServiceReference.WRITING>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class Writing_ServiceClient : System.ServiceModel.ClientBase<UISample.WritingServiceReference.IWriting_Service>, UISample.WritingServiceReference.IWriting_Service {
        
        private BeginOperationDelegate onBeginDoWorkDelegate;
        
        private EndOperationDelegate onEndDoWorkDelegate;
        
        private System.Threading.SendOrPostCallback onDoWorkCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetWritingsDelegate;
        
        private EndOperationDelegate onEndGetWritingsDelegate;
        
        private System.Threading.SendOrPostCallback onGetWritingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public Writing_ServiceClient() {
        }
        
        public Writing_ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Writing_ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Writing_ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Writing_ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DoWorkCompleted;
        
        public event System.EventHandler<GetWritingsCompletedEventArgs> GetWritingsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult UISample.WritingServiceReference.IWriting_Service.BeginDoWork(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDoWork(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void UISample.WritingServiceReference.IWriting_Service.EndDoWork(System.IAsyncResult result) {
            base.Channel.EndDoWork(result);
        }
        
        private System.IAsyncResult OnBeginDoWork(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((UISample.WritingServiceReference.IWriting_Service)(this)).BeginDoWork(callback, asyncState);
        }
        
        private object[] OnEndDoWork(System.IAsyncResult result) {
            ((UISample.WritingServiceReference.IWriting_Service)(this)).EndDoWork(result);
            return null;
        }
        
        private void OnDoWorkCompleted(object state) {
            if ((this.DoWorkCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DoWorkCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DoWorkAsync() {
            this.DoWorkAsync(null);
        }
        
        public void DoWorkAsync(object userState) {
            if ((this.onBeginDoWorkDelegate == null)) {
                this.onBeginDoWorkDelegate = new BeginOperationDelegate(this.OnBeginDoWork);
            }
            if ((this.onEndDoWorkDelegate == null)) {
                this.onEndDoWorkDelegate = new EndOperationDelegate(this.OnEndDoWork);
            }
            if ((this.onDoWorkCompletedDelegate == null)) {
                this.onDoWorkCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDoWorkCompleted);
            }
            base.InvokeAsync(this.onBeginDoWorkDelegate, null, this.onEndDoWorkDelegate, this.onDoWorkCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult UISample.WritingServiceReference.IWriting_Service.BeginGetWritings(int ID_Unit, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetWritings(ID_Unit, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<UISample.WritingServiceReference.WRITING> UISample.WritingServiceReference.IWriting_Service.EndGetWritings(System.IAsyncResult result) {
            return base.Channel.EndGetWritings(result);
        }
        
        private System.IAsyncResult OnBeginGetWritings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int ID_Unit = ((int)(inValues[0]));
            return ((UISample.WritingServiceReference.IWriting_Service)(this)).BeginGetWritings(ID_Unit, callback, asyncState);
        }
        
        private object[] OnEndGetWritings(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<UISample.WritingServiceReference.WRITING> retVal = ((UISample.WritingServiceReference.IWriting_Service)(this)).EndGetWritings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetWritingsCompleted(object state) {
            if ((this.GetWritingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetWritingsCompleted(this, new GetWritingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetWritingsAsync(int ID_Unit) {
            this.GetWritingsAsync(ID_Unit, null);
        }
        
        public void GetWritingsAsync(int ID_Unit, object userState) {
            if ((this.onBeginGetWritingsDelegate == null)) {
                this.onBeginGetWritingsDelegate = new BeginOperationDelegate(this.OnBeginGetWritings);
            }
            if ((this.onEndGetWritingsDelegate == null)) {
                this.onEndGetWritingsDelegate = new EndOperationDelegate(this.OnEndGetWritings);
            }
            if ((this.onGetWritingsCompletedDelegate == null)) {
                this.onGetWritingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetWritingsCompleted);
            }
            base.InvokeAsync(this.onBeginGetWritingsDelegate, new object[] {
                        ID_Unit}, this.onEndGetWritingsDelegate, this.onGetWritingsCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override UISample.WritingServiceReference.IWriting_Service CreateChannel() {
            return new Writing_ServiceClientChannel(this);
        }
        
        private class Writing_ServiceClientChannel : ChannelBase<UISample.WritingServiceReference.IWriting_Service>, UISample.WritingServiceReference.IWriting_Service {
            
            public Writing_ServiceClientChannel(System.ServiceModel.ClientBase<UISample.WritingServiceReference.IWriting_Service> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginDoWork(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("DoWork", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDoWork(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DoWork", _args, result);
            }
            
            public System.IAsyncResult BeginGetWritings(int ID_Unit, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ID_Unit;
                System.IAsyncResult _result = base.BeginInvoke("GetWritings", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<UISample.WritingServiceReference.WRITING> EndGetWritings(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<UISample.WritingServiceReference.WRITING> _result = ((System.Collections.ObjectModel.ObservableCollection<UISample.WritingServiceReference.WRITING>)(base.EndInvoke("GetWritings", _args, result)));
                return _result;
            }
        }
    }
}
